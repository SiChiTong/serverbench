// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace basic {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class Header;
class DemoMsg;

enum MessageId {
  DEMO_MSG_ID = 0
};
bool MessageId_IsValid(int value);
const MessageId MessageId_MIN = DEMO_MSG_ID;
const MessageId MessageId_MAX = DEMO_MSG_ID;
const int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageId_descriptor();
inline const ::std::string& MessageId_Name(MessageId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageId_descriptor(), value);
}
inline bool MessageId_Parse(
    const ::std::string& name, MessageId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
enum MessageType {
  MSGTYPE_WETEST = 0
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MSGTYPE_WETEST;
const MessageType MessageType_MAX = MSGTYPE_WETEST;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .basic.MessageId msgId = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  inline ::basic::MessageId msgid() const;
  inline void set_msgid(::basic::MessageId value);

  // required .basic.MessageType msgType = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  inline ::basic::MessageType msgtype() const;
  inline void set_msgtype(::basic::MessageType value);

  // @@protoc_insertion_point(class_scope:basic.Header)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  int msgtype_;
  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class DemoMsg : public ::google::protobuf::Message {
 public:
  DemoMsg();
  virtual ~DemoMsg();

  DemoMsg(const DemoMsg& from);

  inline DemoMsg& operator=(const DemoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoMsg& default_instance();

  void Swap(DemoMsg* other);

  // implements Message ----------------------------------------------

  DemoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoMsg& from);
  void MergeFrom(const DemoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .basic.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::basic::Header& header() const;
  inline ::basic::Header* mutable_header();
  inline ::basic::Header* release_header();
  inline void set_allocated_header(::basic::Header* header);

  // required string field = 2;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 2;
  inline const ::std::string& field() const;
  inline void set_field(const ::std::string& value);
  inline void set_field(const char* value);
  inline void set_field(const char* value, size_t size);
  inline ::std::string* mutable_field();
  inline ::std::string* release_field();
  inline void set_allocated_field(::std::string* field);

  // @@protoc_insertion_point(class_scope:basic.DemoMsg)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_field();
  inline void clear_has_field();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::basic::Header* header_;
  ::std::string* field_;
  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static DemoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required .basic.MessageId msgId = 1;
inline bool Header::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::basic::MessageId Header::msgid() const {
  // @@protoc_insertion_point(field_get:basic.Header.msgId)
  return static_cast< ::basic::MessageId >(msgid_);
}
inline void Header::set_msgid(::basic::MessageId value) {
  assert(::basic::MessageId_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:basic.Header.msgId)
}

// required .basic.MessageType msgType = 2;
inline bool Header::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::basic::MessageType Header::msgtype() const {
  // @@protoc_insertion_point(field_get:basic.Header.msgType)
  return static_cast< ::basic::MessageType >(msgtype_);
}
inline void Header::set_msgtype(::basic::MessageType value) {
  assert(::basic::MessageType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:basic.Header.msgType)
}

// -------------------------------------------------------------------

// DemoMsg

// required .basic.Header header = 1;
inline bool DemoMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DemoMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DemoMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DemoMsg::clear_header() {
  if (header_ != NULL) header_->::basic::Header::Clear();
  clear_has_header();
}
inline const ::basic::Header& DemoMsg::header() const {
  // @@protoc_insertion_point(field_get:basic.DemoMsg.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::basic::Header* DemoMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::basic::Header;
  // @@protoc_insertion_point(field_mutable:basic.DemoMsg.header)
  return header_;
}
inline ::basic::Header* DemoMsg::release_header() {
  clear_has_header();
  ::basic::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DemoMsg::set_allocated_header(::basic::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:basic.DemoMsg.header)
}

// required string field = 2;
inline bool DemoMsg::has_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DemoMsg::set_has_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DemoMsg::clear_has_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DemoMsg::clear_field() {
  if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_->clear();
  }
  clear_has_field();
}
inline const ::std::string& DemoMsg::field() const {
  // @@protoc_insertion_point(field_get:basic.DemoMsg.field)
  return *field_;
}
inline void DemoMsg::set_field(const ::std::string& value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(value);
  // @@protoc_insertion_point(field_set:basic.DemoMsg.field)
}
inline void DemoMsg::set_field(const char* value) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(value);
  // @@protoc_insertion_point(field_set_char:basic.DemoMsg.field)
}
inline void DemoMsg::set_field(const char* value, size_t size) {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  field_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:basic.DemoMsg.field)
}
inline ::std::string* DemoMsg::mutable_field() {
  set_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:basic.DemoMsg.field)
  return field_;
}
inline ::std::string* DemoMsg::release_field() {
  clear_has_field();
  if (field_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = field_;
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DemoMsg::set_allocated_field(::std::string* field) {
  if (field_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_;
  }
  if (field) {
    set_has_field();
    field_ = field;
  } else {
    clear_has_field();
    field_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:basic.DemoMsg.field)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace basic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::basic::MessageId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basic::MessageId>() {
  return ::basic::MessageId_descriptor();
}
template <> struct is_proto_enum< ::basic::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::basic::MessageType>() {
  return ::basic::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
